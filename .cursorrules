- use uv add/remove to manage dependencies
- use `uv run` to run the script under the current python version
- use `make check` to run all the checks
- use `make format` to format the code, run when lint failed
- use `make lint` to run the linter, run after updating code
- use `make typecheck` to run the type checker
- use `make test` to run the tests
- use `make clean` to clean the project

please use English for comments in the code.
please talk in Japanese with me.

remove none sense new line in front of log
BAD:        logger.info("\nAnalyzing source portfolio...")
GOOD:        logger.info("Analyzing source portfolio...")

Here’s how you should handle exceptions correctly, rather than simply swallowing them with a blanket try-catch:

	1.	Catch Specific Exceptions
	•	Avoid catch (Exception e) where possible. Catch the most relevant exception types you know how to handle.
	•	This improves clarity and prevents masking other errors that might require different handling.
	2.	Provide Meaningful Logging or Reporting
	•	If you catch an exception, log important details such as the message, stack trace, and relevant context data.
	•	This ensures issues can be investigated later, rather than silently failing.
	3.	Re-throw or Propagate When Necessary
	•	If your code cannot effectively handle an exception, do not just ignore it. Rethrow it or wrap it in a custom exception to let higher-level logic decide how to handle the failure.
	•	This makes sure the calling context knows something went wrong and can react accordingly.
	4.	Handle Exceptions Where You Can Actually Solve Them
	•	Only catch an exception where you have a meaningful way to recover or compensate for the failure.
	•	If you catch an exception to take a specific corrective action (e.g., retry a connection, prompt the user, or switch to an alternative resource), do so explicitly.
	5.	Maintain Clear, Self-Documenting Code
	•	Use comments and descriptive exception messages to explain why you are catching a particular exception and how you are handling it.
	•	This makes your error-handling logic easier to maintain and safer to extend.

By following these guidelines, you’ll avoid hiding critical problems, ensure better maintainability, and make debugging more efficient.

Jupeter API のエンドポイントは以下です
  self.price_url = "https://api.jup.ag/price/v2"
  self.quote_url = "https://api.jup.ag/swap/v1"
